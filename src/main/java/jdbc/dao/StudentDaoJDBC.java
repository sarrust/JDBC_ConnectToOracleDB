package jdbc.dao;

import jdbc.model.Student;
import jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDaoJDBC implements StudentDao{
    private static Connection connection = Util.getConnection();

    public StudentDaoJDBC () {
    }

    @Override
    public void createStudentTable() {
        try{
            Statement statement = connection.createStatement();
            statement.executeUpdate("CREATE TABLE Student " +
                    "(id number generated by default as identity, name VARCHAR(50)," +
                    " lastname VARCHAR(50), years number Not null)");
            System.out.println("Таблица создана!");

        } catch (SQLException e) {
            System.out.println("Ошибка не удалось создать таблицу!");
        }
    }

    @Override
    public void saveStudent(String name, String lastName, int year) {
        try(PreparedStatement preparedStatement = connection.prepareStatement(
                "INSERT INTO Student (name, lastname, years) VALUES (?, ?, ?)")) {
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setInt(3, year);
            preparedStatement.executeUpdate();
            System.out.println("Студент с именем \"" + name + "\" успешно добавлен");
        } catch (SQLException e) {
            System.out.println("Ошибка! Не удалось добавить студента!");
        }
    }

    @Override
    public List<Student> getAllStudent() {
        List<Student> list = new ArrayList<>();

        try(ResultSet resultSet = connection.createStatement()
                .executeQuery("SELECT * FROM Student")) {
            while(resultSet.next()) {
                Student student = new Student(resultSet.getString("name"),
                        resultSet.getString("lastname"), resultSet.getInt("years"));
                student.setId(resultSet.getLong("id"));
                list.add(student);

            }
        } catch (SQLException e) {
            System.out.println("Не удалось добавить студента!");
        }
        return list;
    }

    @Override
    public void removeStudentById(long id) {
        try(PreparedStatement preparedStatement = connection.
                prepareStatement("DELETE from Student WHERE id = ?")) {
            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
            System.out.println("Студент удален!");
        } catch (SQLException e) {
            System.out.println("Ошибка! Не удалось удалить студента!");
        }
    }
}
